---
- name: Create working directory
  file:
    path: "{{ working_dir }}"
    state: directory
    mode: '0755'

- name: Generate RSA key
  shell: "openssl genrsa -des3 -out node.key -passout pass:cassandra 2048"
  args:
    chdir: "{{ working_dir }}"
    executable: /bin/bash

- name: Create OpenSSL configuration file
  template:
    src: roles/tls_common/templates/ssl.cnf.j2
    dest: "{{ working_dir }}/ssl.cnf"

- name: Generate CSR
  shell: "openssl req -config ssl.cnf -new -key node.key -out node.csr -passin pass:cassandra"
  args:
    chdir: "{{ working_dir }}"
    executable: /bin/bash

- name: Sign the SAN certificate
  shell: "openssl x509 -req -CA {{ ca_cert }} -CAkey {{ ca_key }} -in node.csr -out node.crt -days 365 -CAcreateserial -extensions v3_req -extfile ssl.cnf -passin pass:cassandra"
  args:
    chdir: "{{ working_dir }}"
    executable: /bin/bash
  when: ssl_extensions_enabled | bool

- name: Sign the certificate
  shell: "openssl x509 -req -CA {{ ca_cert }} -CAkey {{ ca_key }} -in node.csr -out node.crt -days 365 -CAcreateserial -extfile ssl.cnf -passin pass:cassandra"
  args:
    chdir: "{{ working_dir }}"
    executable: /bin/bash
  when: not ssl_extensions_enabled

- name: Generate the keystore (.p12 file)
  shell: "openssl pkcs12 -export -out keystore.p12 -inkey node.key -in node.crt -name {{ inventory_hostname }} -passin pass:cassandra -passout pass:cassandra"
  args:
    chdir: "{{ working_dir }}"
    executable: /bin/bash

- name: Import the CA certificate
  shell: "keytool -keystore keystore.p12 -alias {{ ca_name }} -import -file {{ ca_cert }} -noprompt -keypass cassandra -storepass cassandra"
  args:
    chdir: "{{ working_dir }}"
    executable: /bin/bash
